
# <a name="bootstrap-internals" id="bootstrap-internals" data-magellan-target="bootstrap-internals">Bootstrapping Habitat</a>

This document provides developer documentation on how the Habitat system becomes self-sustaining. It is built upon the work from the [Linux from Scratch](http://www.linuxfromscratch.org/lfs/) project.

This instructions in this document may become rapidly out-of-date as we develop Habitat further. Should you have questions, please join us in [Slack](http://slack.habitat.sh/).

## Part I: Setup

In order to bootstrap the system from scratch, you should be familiar with how the Linux From Scratch project works.

We add the following software to augment the Linux From Scratch toolchain:

* Statically built [BusyBox](https://www.busybox.net/) - used for the unzip implementation. This is copied in to tarball as `/tools/bin/busybox`.
* Statically built [Wget](https://www.gnu.org/software/wget/) with OpenSSL support - used by the build program to download sources. This is copied in to the tarball as `/tools/bin/wget.real`.
* Statically built [rq](https://github.com/dflemstr/rq) - used by the build program to verify config value types. This is copied in to the tarball as `/tools/bin/rq`.
* A symlink of `unzip` which points to the BusyBox binary and used by the build program to extract zipped source archives. This is copied in to the tarball as `/tools/bin/unzip -> busybox`.
* A copy of curl’s [cacert.pem](https://curl.haxx.se/ca/cacert.pem) certificates - used by wget when connecting to SSL-enabled websites. This is copied into the tarball as `/tools/etc/cacert.pem`.
* A small wrapper script for `wget` so that we use the SSL certificates we added to the tarball. Its source is:

```shell
#!/tools/bin/busybox sh
exec /tools/bin/wget.real --ca-certificate /tools/etc/cacert.pem $*
```

Finally, we place a recent last-known-good copy of the `hab` binary inside `tools/bin`.

The entire tarball of bootstrap "tools" lives inside the [stage1 studio](http://s3-us-west-2.amazonaws.com/habitat-studio-stage1/habitat-studio-stage1-20180312233639.tar.xz) tarball. This should be unpacked into `/tools` on a Linux host that will serve as the build environment until the system is self-sustaining through the rest of this procedure.

## Part II: Stage 0

### Creating The stage1 tarball

```shell
$ TARFILE=~ubuntu/habitat-studio-stage1-$(date -u +%Y%m%d%H%M%S).tar

$ tar cf $TARFILE -C /mnt/lfs tools

$ hab install core/cacerts core/wget-static core/busybox-static core/rq core/hab

$ mkdir -p tools/{bin,etc}

$ cat <<EOF > tools/bin/wget
#!/tools/bin/busybox sh
exec /tools/bin/wget.real --ca-certificate /tools/etc/cacert.pem \$*
EOF
$ chmod 755 tools/bin/wget

$ cp -p $(hab pkg path core/wget-static)/bin/wget tools/bin/wget.real
$ cp -p $(hab pkg path core/busybox-static)/bin/busybox tools/bin/busybox
$ cp -p $(hab pkg path core/rq)/bin/rq tools/bin/rq
$ cp -p $(hab pkg path core/hab)/bin/hab tools/bin/hab
$ cp -p $(hab pkg path core/cacerts)/ssl/certs/cacert.pem tools/etc/cacert.pem
$ (cd tools/bin && ln -sv ./busybox unzip)

$ tar --append --file $TARFILE tools
$ xz --compress -9 --threads=0 --verbose $TARFILE

$ cp -v ${TARFILE}.xz /tmp/
```

### Freshening The stage1 tarball

From time to time and especially with breaking changes to `hab`’s core behavior it is a good idea to update the software in the `habitat-studio-stage1` tarball, even if that means skipping the work of rebuilding the toolchain.

```shell
$ docker run --rm -ti -v $(pwd):/src ubuntu:xenial bash
```

```shell
# Install xz tools
$ apt-get update && apt-get install -y xz-utils

# Uncompress the tarball and remove old version of hab
$ tarxz=/src/habitat-studio-stage1-20160612022150.tar.xz
$ xz --decompress --keep $tarxz
$ tar --delete --file=${tarxz/.xz/} tools/bin/hab

# Extract new version of hab in correct path structure
$ hart=/src/core-hab-0.6.0-20160701014820-x86_64-linux.hart
$ mkdir -p /tmp/tools/bin
$ tail -n +6 $hart \\
  | xzcat \\
  | (cd /tmp/tools/bin && tar x --no-anchored bin/hab --strip-components=7)

# Append new version of hab into tarball
$ (cd /tmp && tar --append --file=${tarxz/.xz/} tools)

# Rename tarball to current date and recompress with xz
$ dst=/src/habitat-studio-stage1-$(date -u +%Y%m%d%H%M%S).tar.xz
$ mv ${tarxz/.xz/} ${dst/.xz/}
$ xz --compress -9 --threads=0 --verbose ${dst/.xz/}
```

If you upload a new version of this tarball for broader use with the Studio software, it is worth updating the source location in the Studio's [hab-studio-type-stage1.sh](https://github.com/habitat-sh/habitat/blob/master/components/studio/libexec/hab-studio-type-stage1.sh) code (the line with `${STAGE1_TOOLS_URL}`). Note that simply to use or test a new tarball with Studio, you should only need to set the following before using `hab studio` commands:

* `export STAGE1_TOOLS_URL=habitat-studio-stage1-20160612022150.tar.xz`

and finally, place this tarball under `/tmp` which will help the Studio code find this tarball as if it was previously downloaded, and it will be used directly.

## Part III: Stage 1

In this stage, we rebuild all the base packages needed by Habitat using the tools (compiler, etc.) from the existing tools tarball. You will need to have a depot locally running on your system, the latest version of the studio, and you'll need a copy of the [habitat](https://github.com/habitat-sh/habitat) and [core-plans](https://github.com/habitat-sh/core-plans) repos on your local disk. For our work, we will assume that everything is being run under a common parent directory called `habitat-sh/`. Assuming we want to rebuild the Habitat software as of the last release tag (we'll use `0.20.0` here) and the core plans from latest, here's how to get set up:

```shell
$ mkdir habitat-sh
$ cd habitat-sh
$ git clone https://github.com/habitat-sh/habitat.git
$ (cd habitat && git checkout 0.20.0)
$ git clone https://github.com/habitat-sh/core-plans.git
```

Next, let's get our minimum Habitat software to start us off:

```shell
# Completely clean this build host--this will purge all Habitat software,
# caches, and keys from this host!
$ rm -rf /hab

# Install the latest version of the 'hab' program
$ ./habitat/components/hab/install.sh

# Generate a 'core' origin key, if not already imported or created
$ hab origin key generate core
```

```shell
$ sudo rm -rf ./results ./tmp/*.db
```

Finally, we export several environment variables before entering the Studio:

```shell
$ ./core-plans/bin/bootstrap/stage1-studio.sh enter
```

Now in the stage1 Studio:

```studio
$ ./core-plans/bin/bootstrap/stage1-build-base-plans.sh
```

TODO fn: replace this to the end...

```studio
$ $BUILD libarchive
$ $BUILD libsodium
$ $BUILD zeromq
$ $BUILD ../components/depot
```

```studio
$ hab origin key upload -z userkey -u http://127.0.0.1:9632/v1 \\
  /hab/cache/keys/core-*.pub
$ ls -1 launch-stage1-base-harts/*.hart \\
  | while read hart; do hab pkg up -z userkey -u http://127.0.0.1:9632/v1 $hart; done
```

## Part IV: Stage 2

In this stage, we rebuild all the base packages needed by Habitat using the tools (compiler, etc.) from the previous stage, thus making the system self-sustaining.

~~~shell
$ export STUDIO_TYPE=default
$ export HAB_STUDIO_ROOT=/hab/studios/stage2
$ export HAB_ORIGIN=core
$ export HAB_DEPOT_URL=http://127.0.0.1:9632/v1
$ hab studio enter
~~~

Then, in the Studio:

```studio
$ export DB_PREFIX=stage2-
$ rm -rf ./results ./tmp/${DB_PREFIX}*.db
$ time record ${DB_PREFIX}base ./core-plans/bin/build-base-plans.sh
```

TODO fn: replace this to the end...

```studio
$ build libarchive
$ build libsodium
$ build zeromq
$ build ../components/depot
```

```studio
$ hab origin key upload -z userkey -u http://127.0.0.1:9632/v1 \\
  /hab/cache/keys/core-*.pub
$ ls -1 launch-stage2-base-harts/*.hart \\
  | while read hart; do hab pkg up -z userkey -u http://127.0.0.1:9632/v1 $hart; done
```

## Part V: Remaining packages in world

In this stage, we rebuild all of the remaining packages using the base packages from the previous phase. We recommend that this stage be executed on a powerful machine, such as an `c4.4xlarge` on Amazon Web Services (AWS).

Update build host now:

```shell
$ hab install ~ubuntu/launch-stage2-base-harts/core-hab-0.6.0-20160612082139-x86_64-linux.hart
$ hab pkg binlink core/hab hab
$ hab install ~ubuntu/launch-stage2-base-harts/core-hab-studio-0.6.0-20160612082608-x86_64-linux.hart
```

```shell
$ apt-get update
$ apt-get install -y ruby2.0
$ find . -name plan.sh | ruby2.0 ./plans/build_order.rb --without-base | cut -d ' ' -f 2 > world_build_order
$ cp world_build_order all_order
```

```shell
$ export STUDIO_TYPE=default
$ export HAB_STUDIO_ROOT=/hab/studios/stage3
$ export HAB_ORIGIN=core
$ export HAB_DEPOT_URL=http://127.0.0.1:9632/v1
$ hab studio enter
```

```studio
$ time { cat all_order | while read plan; do build $plan || break; done }
```
